name: Update Azure Service Tags

on:
  schedule:
    # Runs every Monday at 7:00 AM UTC
    - cron: "0 7 * * 1"
    # Runs every Friday at 6:00 PM UTC (end of business day)
    - cron: "0 18 * * 5"

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      baseline_setup:
        description: "Setup initial baseline (first run)"
        required: false
        default: false
        type: boolean

jobs:
  update-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write # allow pushing branches
      pull-requests: write # allow opening PRs
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Azure Service Tag Watcher
        run: |
          set -euo pipefail
          BASELINE="${{ github.event.inputs.baseline_setup || 'false' }}"
          if [ "$BASELINE" = "true" ]; then
            echo "üéØ Setting up initial baseline - no changes will be recorded"
            python scripts/azure_watcher.py --baseline
          else
            echo "üìä Running regular update - detecting changes"
            python scripts/azure_watcher.py
          fi

      - name: Configure Git identity
        run: |
          git config --local user.email "eliaquimbrandao@users.noreply.github.com"
          git config --local user.name "Eliaquim Brandao"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Create commit (if needed)
        id: commit_step
        run: |
          set -euo pipefail
          CHANGES="$(git status --porcelain=v1 docs/data || true)"
          if [ -z "$CHANGES" ]; then
            echo "No changes under docs/data; exiting early."
            echo "did_commit=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add -- docs/data
          BASELINE="${{ github.event.inputs.baseline_setup || 'false' }}"
          if [ "$BASELINE" = "true" ]; then
            MSG="üìä Establish Azure Service Tags baseline - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          else
            MSG="üìà Update Azure Service Tags data - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          fi
          git commit -m "$MSG"
          echo "did_commit=true" >> "$GITHUB_OUTPUT"

      - name: Create branch and push
        if: steps.commit_step.outputs.did_commit == 'true'
        id: push_branch
        run: |
          set -euo pipefail
          BRANCH="data/update-$(date -u +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH"
          git push -u origin "$BRANCH"
          echo "branch_name=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Open Pull Request to main
        if: steps.commit_step.outputs.did_commit == 'true'
        id: open_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          # jq is available on ubuntu-latest; install if ever missing:
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

          BRANCH="${{ steps.push_branch.outputs.branch_name }}"
          TITLE="Automated data update: $BRANCH"
          BODY="This PR was opened by CI to merge the latest Azure Service Tags data in \`docs/data\`."

          DATA=$(jq -n \
            --arg title "$TITLE" \
            --arg head  "$BRANCH" \
            --arg base  "main" \
            --arg body  "$BODY" \
            '{title:$title, head:$head, base:$base, body:$body, draft:false}')

          HTTP_CODE=$(curl -sS -o /tmp/pr_resp.json -w "%{http_code}" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -X POST "https://api.github.com/repos/${REPO}/pulls" \
            -d "$DATA")

          if [ "$HTTP_CODE" = "201" ]; then
            echo "Pull request created."
            PR_NUMBER=$(jq -r '.number' /tmp/pr_resp.json)
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          elif [ "$HTTP_CODE" = "422" ]; then
            echo "A pull request from ${BRANCH} to main may already exist. Response:"
            cat /tmp/pr_resp.json || true
            # Not fatal - try to get existing PR number
            EXISTING_PR=$(curl -sS \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/pulls?head=${REPO%%/*}:${BRANCH}&base=main" | jq -r '.[0].number // empty')
            if [ -n "$EXISTING_PR" ]; then
              echo "pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "PR create failed with HTTP $HTTP_CODE. Response:"
            cat /tmp/pr_resp.json || true
            exit 1
          fi

      - name: Auto-merge Pull Request
        if: steps.commit_step.outputs.did_commit == 'true' && steps.open_pr.outputs.pr_number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          PR_NUMBER="${{ steps.open_pr.outputs.pr_number }}"
          
          echo "üîÑ Attempting to merge PR #$PR_NUMBER"
          
          # Wait a moment for PR to be fully created
          sleep 3
          
          # Try to merge directly (will work if admin bypass is configured)
          MERGE_DATA=$(jq -n \
            --arg method "squash" \
            --arg title "üìà Update Azure Service Tags data" \
            '{merge_method: $method, commit_title: $title}')
          
          HTTP_CODE=$(curl -sS -o /tmp/merge_resp.json -w "%{http_code}" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -X PUT "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
            -d "$MERGE_DATA")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Pull request #$PR_NUMBER merged successfully!"
            echo "üöÄ GitHub Pages will deploy automatically in 1-2 minutes"
          elif [ "$HTTP_CODE" = "405" ]; then
            echo "‚ö†Ô∏è PR #$PR_NUMBER cannot be auto-merged (requires manual approval or ruleset changes)"
            echo "Response:"
            cat /tmp/merge_resp.json || true
            echo ""
            echo "‚ÑπÔ∏è The PR is open and ready for your review at:"
            echo "   https://github.com/${REPO}/pull/${PR_NUMBER}"
            # Not a failure - PR is still created for manual merge
            exit 0
          else
            echo "‚ùå Merge failed with HTTP $HTTP_CODE. Response:"
            cat /tmp/merge_resp.json || true
            echo ""
            echo "‚ÑπÔ∏è The PR is still open at:"
            echo "   https://github.com/${REPO}/pull/${PR_NUMBER}"
            # Not a failure - PR is still created
            exit 0
          fi
